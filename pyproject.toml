[build-system]
requires = ["hatchling", "hatch-vcs"]
build-backend = "hatchling.build"

[project]
name = "pytroll-collectors"
dynamic = ["version"]
description = "Pytroll data collectors"
readme = "README.md"
license = "GPL-3.0-or-later"
license-files = ["LICENSE"]
requires-python = ">=3.11"
authors = [
    { name = "Martin Raspaud", email = "martin.raspaud@smhi.se" },
]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Science/Research",
    "Operating System :: OS Independent",
    "Programming Language :: Python",
    "Topic :: Scientific/Engineering",
]
dependencies = [
    "posttroll>=1.3.0",
    "pyyaml",
    "trollsift",
]

[project.optional-dependencies]
all = [
    "fsspec",
    "netifaces",
    "pyresample",
    "python-dateutil",
    "pytroll-schedule",
    "s3fs",
    "watchdog!=4.0.0",
]
geographic_gatherer = [
    "pyresample",
    "pytroll-schedule",
    "watchdog!=4.0.0",
]
s3_segment_gatherer = [
    "fsspec",
]
s3stalker = [
    "python-dateutil",
    "s3fs",
]
scisys_receiver = [
    "netifaces",
]
trollstalker = [
    "watchdog!=4.0.0",
]

[project.urls]
Homepage = "https://github.com/pytroll/pytroll-collectors"

[dependency-groups]
test = [
    "freezegun>=1.5.5",
    "paramiko>=4.0.0",
    "pytest>=8.4.2",
    "pytest-cov>=7.0.0",
]

[project.scripts]
"cat.py" = "pytroll_collectors.scripts.cat:main"
"s3stalker_daemon.py" = "pytroll_collectors.scripts.s3stalker_daemon:main"
"segment_gatherer.py" = "pytroll_collectors.scripts.segment_gatherer:main"
"s3stalker.py" = "pytroll_collectors.scripts.s3stalker:main"
"geographic_gatherer.py" = "pytroll_collectors.scripts.geographic_gatherer:main"
"scisys_receiver.py" = "pytroll_collectors.scripts.scisys_receiver:main"
"trollstalker.py" = "pytroll_collectors.scripts.trollstalker:main"
"trollstalker2.py" = "pytroll_collectors.scripts.trollstalker2:main"
"zipcollector_runner.py" = "pytroll_collectors.scripts.zipcollector_runner:main"

[tool.hatch.build.targets.sdist]
include = [
    "/pytroll_collectors",
]

[tool.hatch.version]
source = "vcs"

[tool.hatch.build.hooks.vcs]
version-file = "pytroll_collectors/version.py"

[tool.coverage.run]
relative_files = true
omit = ["pytroll_collectors/version.py"]

[tool.ruff]
line-length = 120

[tool.ruff.lint]
# See https://docs.astral.sh/ruff/rules/
select = ["A", "E", "W", "TID", "T10"]
# to add in the future: "Q", "I", "N", "PT", "S", "T20", "C90", "F", "B", "D"

[tool.ruff.lint.per-file-ignores]
"pytroll_collectors/tests/*" = ["S101"]  # assert allowed in tests
"doc/source/conf.py" = ["D100", "A001"]  # sphinx misbihaving
"pytroll_collectors/version.py" = ["D100", "Q000"]  # automatically generated by hatch-vcs

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.lint.mccabe]
max-complexity = 10
